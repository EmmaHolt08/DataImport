# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./code/awesome-project 

    env: # Set environment variables for all steps in this job
      DATABASE_URL: postgresql://testuser:testpassword@localhost/testdb

    services: # <--- NEW SERVICE BLOCK: Define your PostgreSQL/PostGIS database
      postgres:
        # Use a PostGIS image that includes PostgreSQL and spatial extensions
        image: postgis/postgis:13-3.3 # Recommended: PostGIS 13 (PostgreSQL 13) with PostGIS 3.3
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432 # Map container port to host port
        options: >- # Health check to ensure DB is ready before tests run
          --health-cmd pg_isready -U testuser -d testdb
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.13.5
      uses: actions/setup-python@v3
      with:
        python-version: "3.13.5"


    # - name: Debug 1 - Verify Working Directory & List Contents
    #   run: |
    #     echo "Current working directory: $(pwd)"
    #     echo "Contents of current working directory:"
    #     ls -la
    #     echo "Contents of 'app/' (should exist and have __init__.py):"
    #     ls -la app/
    #     echo "Contents of 'tests/' (should exist and have __init__.py):"
    #     ls -la tests/
    #     echo "Contents of requirements.txt:"
    #     cat requirements.txt

    - name: Install dependencies
      run: |
        echo "Upgrading pip..."
        python3 -m pip install --upgrade pip
        
        echo "Attempting to install dependencies from requirements.txt..."
        # Use 'set -e' to immediately exit if pip install fails
        set -e 
        if [ -f requirements.txt ]; then 
          pip3 install -r requirements.txt
          echo "Dependency installation command finished."
        else
          echo "ERROR: requirements.txt NOT FOUND in $(pwd)"
          exit 1 # Fail the job if requirements.txt isn't found
        fi

    # - name: Debug 2 - Verify SpatiaLite & Python Environment
    #   run: |
    #     echo "--- Current Working Directory ---"
    #     pwd
        
    #     echo "--- Find mod_spatialite.so on system ---"
    #     # Search for the spatialite module and output its exact path(s)
    #     find /usr/lib /usr/local/lib -name "mod_spatialite.so*" 2>/dev/null || echo "mod_spatialite.so not found in standard paths"
        
    #     echo "--- Test SpatiaLite Load in Pure Python ---"
    #     # Test the load_extension directly in a Python script
    #     python3 -c """
    #     import sqlite3
    #     import os

    #     db_path = os.getenv('DATABASE_URL').replace('sqlite:///', '')
    #     print(f'Attempting to connect to: {db_path}')
    #     conn = sqlite3.connect(db_path)
    #     try:
    #       conn.enable_load_extension(True)
    #       print('Attempting to load /usr/lib/sqlite3/mod_spatialite.so')
    #       conn.load_extension('/usr/lib/sqlite3/mod_spatialite.so')
    #       print('SpatiaLite extension loaded successfully in pure Python!')
    #     except sqlite3.OperationalError as e:
    #       print(f'Pure Python SpatiaLite load FAILED: {e}')
    #     finally:
    #       conn.enable_load_extension(False)
    #       conn.close()
    #     """

    #     echo "--- Python Version ---"
    #     python3 --version
    #     echo "--- Python Executable Path ---"
    #     which python3
    #     echo "--- pip List (Checking for FastAPI, httpx, pytest) ---"
    #     pip3 show fastapi || echo "fastapi not found by pip show"
    #     pip3 show httpx || echo "httpx not found by pip show"
    #     pip3 show pytest || echo "pytest not found by pip show"
    #     echo "--- Full pip List (for comprehensive check) ---"
    #     pip3 list
    #     echo "--- Python sys.path (where Python looks for modules) ---"
    #     python3 -c "import sys; print(sys.path)"
    #     echo "--- Check if 'app' directory is importable ---"
    #     python3 -c "import app.database; print('app.database imported successfully'); import main; print('main imported successfully')" || echo "Error importing app.database or main"


    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        pytest
